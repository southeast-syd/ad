中兴捧月大赛—通用软件
大模型部署加速
一.赛题文档
1.赛题背景：
随着大模型技术演进，模型的规模和能力也日益提升，然而大模型的部署需要较高的硬件资源，对于参数量较大的模型需要多个GPU甚至多台设备进行部署，因此，推理成本成为大模型应用阶段成本的主要组成部分。传统大模型计算量庞大，推理时间较长，加速技术能够减少每次推理请求的响应时间，提高用户体验。因此大模型部署加速成为当前研究的热门领域。
大模型部署加速方式一是减少大模型的计算量，如剪枝量化方式；二是针对不同硬件进行部署优化，提升整体推理速度，减少资源空闲时间；三是优化不同算力单元的通信方式，减少通信时间。
2.赛题简介：
在深度学习中，大模型结构可以采用计算图表示。其本质为一个有向无环图，其中每个节点代表一个计算操作，每条边表示数据的依赖关系。通常，大模型可以接受一个或多个输入，产生一个或多个输出。为了进行简化，本赛题规定：每个模型有且仅有一个输入节点，有多个输出节点。如图，为一个计算图的示意。0表示计算图的起点，9，10为计算图的终点。计算图中会包含，一对一(7->9)，一对多(0->1,2)，多对一(3,4,6->8)，多对多(1,2->4,5)多种结构。
赛题数据下载
通用软件- 数据.zip
下载
图 1 大模型计算图示意
样本从输入节点开始，会经过图中所有的计算节点(1-8)，最终到达输出节点，输入、输出以及计算节点会对样本数据进行计算处理，因此会占用内存和计算量，通常情况下，不同样本大小和同时处理的样本数量不同，计算节点对内存和计算时间的需求也不同。本赛题规定，不同计算节点的内存占用和计算量不同，但是相同计算节点在同一个时间只会处理一个样本，且对不同样本内存和计算时间占用相同。
模型计算，需要将其部署到相应处理器中，如CPU、GPU、TPU、NPU等，本赛题称之为算力单元，由于型号的差异，每种算力单元具有不同的内存和算力，内存影响该算力单元可以部署的计算节点数量，算力影响计算任务的运行时间。
对于一个参数量巨大的模型，单个算力单元无法部署，即使能够部署，其运算效率也会很低。不同的算力单元可以并行计算，因此，在实际部署时会将计算图进行拆分，即模型拆分，并部署到 N 个算力单元上，来加速计算。
不同的算力单元可以相互通信，在通信时存在一定的通信开销。任务在本算力单元完成计算后，如后继计算任务不在该算力单元，则需要将处理结果同步到后继计算任务所在算力单元中。后继计算任务必须等到其全部前置计算任务完成计算并通信完成，才能开始计算。
同一个算力单元可以部署多个计算任务，只要保证计算任务占用的内存总和小于算力单元内存大小。如在同一时间，同一个算力单元有多个计算任务需要运行，则按用户指定优先级排队进行。
同时，为了提升大模型推理效率，在部署阶段会对大模型进行优化，常规的操作是模型量化操作。模型量化是指以较低的推理精度损失将连续取值的浮点型权重近似为有限多个离散值的过程，通过以更少的位数表示浮点数据，模型量化可以减少模型尺寸，进而减少在推理时的内存消耗，加快模型推理。
基于以上描述，总结出以下几个定义：
1)计算任务：计算任务是大模型计算图的基本组成单元，计算任务有多种类型，每种类型的计算任务有不同的计算量和占用内存，起点和终点也是计算任务的一种。多个计算任务在同一个算力单元可能会同时开始，此时按照用户给定的优先级排队执行，优先级在计算任务规划输出结果中体现，排序靠前的计算任务优先级更高。
2)计算图：大模型由不同计算任务组成，这些计算任务之间存在相互依赖关系，依赖关系组成一张计算图。该图为一张有向无环图，图中由包含起点和终点的 M 个计算任务组成，每个任务有唯一的 ID(0 ~ M-1)，起点编号固定为0，终点编号不固定，在图中体现，起点为无前驱节点的节点，终点为无后驱节点的节点。每个计算任务会有多个前置计算任务，也会有多个后置计算任务，并且给定任务之间的依赖关系。
3)算力单元：负责计算任务的执行，算力单元有固定的算力和内存，共有N个算力单元，每个算力单元有唯一的ID(0 ~ N-1)，单个算力单元可以部署多个计算任务，但每个算力单元内存有限，算力单元中分配的计算任务总内存不能大于该算力单元的内存。每个算力单元在相同时间只能运行一个计算任务。当样本到达算力单元时，如当前算力单元有计算任务正在运行，则该样本的计算任务进入等待区，当等待区中有多个计算任务，依次按照样本到达的先后顺序、样本序号以及计算任务优先级进行顺序执行。
4)计算时间：每个算力单元有不同的算力，计算时间为计算任务的计算量除以算力。给定两个计算任务 u和v，如果u ->v不存在依赖，此时将u和v分配到不同的算力单元上，这两个计算任务可以同时运行，即计算时间可以掩盖。
5)通信时间：给定每个算力单元之间的通信时间。对于两个算力单元a和b，a->b的通信时间与b->a的通信时间相同。如果任务 u 分配到算力单元 a上，任务 v 分配到 算力单元 b上，且 u -> v 存在依赖（即 u 必须先完成，才能开始 v），那么额外的通信开销是a->b的通信时间。如果 a == b（同一块 GPU），则通信时间为 0，同一个算力单元可以同时进行计算和通信。
6)样本：有 S 个样本，每个样本有唯一的ID(0 ~ S-1)，每个样本与计算任务类型相关，任务执行后能提升样本的计算准确性，这里采用计算任务对样本的贡献度表示。
7)贡献度：样本 s 经过计算任务时，会有贡献度产生，样本会按计算图依赖顺序经过图中所有计算任务，不重不漏，最终得到的总贡献度为所有计算任务的贡献度总和。
8)计算模式：采用计算模式表示模型的量化和剪枝操作，每个计算任务有多种计算模式可选，其中模式0为不优化，模式1，2，3为量化操作：
模式 = 0：完整计算，贡献度 100%。
模式 = 1：计算时间减少 50%，内存占用减少50%，贡献度减少 75%。
模式 = 2：计算时间减少 75%，内存占用减少75%，贡献度减少 50%。
模式 = 3：计算时间减少 90%，内存占用减少90%，贡献度减少 40%。
9)样本运行叠加：样本按照id顺序依次送入输入节点，输入节点完成第一个样本的运算任务后，样本送入后续算力单元，本算力单元可以立即进行下一个样本的运算。
3.已知条件：
输入
计算任务：计算任务id，计算量，所需内存,后续计算任务*N。
计算单元：计算单元id，不同计算单元通信时间，内存
样本：样本id，计算任务id，贡献度。
输出
任务分配方案：
计算任务列表，包含计算任务所在算力单元id，采用的计算模式
最终目标：
最小化任务的最大完成时间。
最大化所有样本的计算贡献度总和。
调度优先级示例：
排序优先级原则，任务开始时间>样本序号>计算任务优先级
1）计算图如图 1所示，假定任务0，1都部署在算力单元0中，样本0送入计算任务0，计算任务0完成后，将样本发到计算任务1，同时样本1送入计算任务0，此时算力单元有两个任务需要运行，则按照样本序号排序，先运行样本0的计算任务1。
2）计算图如图 1所示，假定任务3，4，5都部署在算力单元2中，样本0完成计算任务1后会同时送入任务3，4，5，此时算力单元2 中有三个计算任务需要同时进行，此时会比较任务3，4，5的优先级，假定在输出样本中排序为任务4，5，3，则先运行任务4，再运行任务5，再运行任务3。
3）在2）的基础上，如果算力单元在运行样本0的计算任务5时，样本1也到达任务3，4，5了，此时样本1的任务先等待，当样本0的计算任务5完成后，由于样本0计算任务3已提前等待，因此先运行样本0的任务3。
计算过程示例
计算图如图 1所示，给定样本id 0，1，2，计算任务id 0-10，算力单元id 0-10，所有算力单元通信时间为1，计算时间为1。以下表格为每个时间点样本在计算任务的运行过程，表格第一列为时间点，第一行为算力单元id，第二行为计算任务id，后续行为每个时间点,计算任务计算的样本id。
示例1：
计算任务0-10分别部署在算力单元0-10中，以三个样本总共耗时为12。
0	1	2	3	4	5	6	7	8	9	10
0	1	2	3	4	5	6	7	8	9	10
0	0										
1	1										
2	2	0	0								
3		1	1								
4		2	2	0	0	0					
5				1	1	1					
6				2	2	2	0	0			
7							1	1			
8							2	2	0	0	
9									1	1	
10									2	2	0
11											1
12											2
示例2： 每个计算任务可以部署在不同算力单元中，以三个样本总共耗时为20。
	0	         1			2			3	                        4
时间点	0	1	2	3	4	5	6	7	8	9             10
0	0										
1	1										
2	2	0									
3			0								
4		1									
5			1	0					
6		2			0						
7			2			0					
8				1							
9					1		0				
10						1		0			
11				2					0		
12					2		1				
13                                                                                            2                              1                               0              
14                                                                                                                                            1                               0
15                                                                                                            2                                                                  
16                                                                                                                            2                               1                   
17                                                                                                                                            2                               1   
18                                                                                                                                                                              
19                                                                                                                                                             2                 
20                                                                                                                                                                             2
4.限制的提交语言及语言版本：
赛题跑分采用linux环境，支持语言：C++17 /java1.8.0/python3
5.赛题数据：
输入文件
input1.txt 模型的计算图描述文件，包含计算任务的内存、计算量以及计算任务构成关系，每一行为一个计算任务，格式：
计算任务id,任务类型id,计算量,所需内存,后续计算任务id1,...,后续计算任务idn
计算任务id,任务类型id,计算量,所需内存,后续计算任务id1,...,后续计算任务idm
... ...
图 2 计算图说明
如图 2左，可以表示成右边表格形式，包含计算任务id,任务类型id，计算量，所需内存以及后续任务
input2.txt 算力单元的描述文件，第一行规定了算力单元数量N，通信连接数量M，第一行到第N行为算力单元的属性文件，第N+1行到第N+M行为算力单元的通信时间
算力单元数量N,通信连接数量M
算力单元id0,算力,内存
... ...
算力单元idn-1,算力,内存
算力单元id0,算力单元id1,通信时间
算力单元id0,算力单元id2,通信时间
... ...
算力单元idn-2,算力单元idn-1,通信时间
图 3 算力单元说明
算力单元描述包含算力单元的属性，即算力和内存两部分，以及算力单元之间的通信开销。
sample.txt 样本的描述文件
样本id1,任务类型id1,贡献度
样本id1,任务类型id2,贡献度
... ...
样本id2,任务类型id1,贡献度
样本id2,任务类型id2,贡献度
... ...
图 4 样本说明
样本文件中的条目通过任务类型与计算任务匹配。
以样本0为例，如图 4所示，样本0在类型为0的计算任务上执行时，产生1点贡献度，在类型为2的计算任务上执行时，产生3点贡献度。
输出文件
output.txt 优化后的模型计算图的描述文件，为每个计算任务的优化情况
计算任务id,算力单元id,模式
计算任务id,算力单元id,模式
6.评分规则
运行时间：为样本通过所有节点所需的时间
归一化时间：运行时间/所有计算任务计算量相加。
贡献度总量：所有样本通过优化的计算图后得到的贡献度
排行榜分数=贡献度总量/归一化时间，从大到小排名
最终分数=排名*80%+算法设计*20%
7.提交介绍
提交算法的运行代码文件，算法设计文档，算法运行说明文档，存放在同一文件夹下，打包成.zip格式上传。代码提交的目录结构：
  dir
  |——data/
  |——Main.cpp/Main.java/Main.py
  |——算法设计文档
注意：
1、data文件夹仅表示代码运行层次结构，无需上传。在代码文件所在目录运行程序，代码需要遍历”./data/”下所有文件夹，保证代码中数据文件的读写路径为：“ ./data/序号/输入文件”，生成结果写入路径为： ”./data/序号/输出文件”。否则会导致跑分失败。
2、后台会进行代码查重，包括一人多账户，如发现雷同代码，一经确认，所有雷同代码成绩作废。
8.程序文件名和入口函数规定
代码文件使用同一个文件，文件名固定为Main.cpp/Main.java/Main.py，其中M为大写，文件名称不满足要求将会导致跑分失败。